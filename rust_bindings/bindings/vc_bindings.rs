/* automatically generated by rust-bindgen 0.59.2 */

pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 12;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 1;
pub const __clang_version__: &[u8; 56usize] =
    b"12.0.1 (Red Hat 12.0.1-4.module+el8.5.0+13246+cefb5d4c)\0";
pub const __GNUC__: u32 = 4;
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &[u8; 62usize] =
    b"Clang 12.0.1 (Red Hat 12.0.1-4.module+el8.5.0+13246+cefb5d4c)\0";
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &[u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &[u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &[u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &[u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &[u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &[u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &[u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &[u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &[u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &[u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &[u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &[u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &[u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &[u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &[u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &[u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &[u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &[u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &[u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &[u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &[u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &[u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &[u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &[u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &[u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &[u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &[u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &[u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &[u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &[u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &[u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &[u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &[u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &[u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &[u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &[u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &[u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &[u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &[u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &[u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &[u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &[u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &[u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &[u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &[u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &[u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &[u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &[u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &[u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &[u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &[u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &[u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &[u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &[u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &[u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &[u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &[u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &[u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &[u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &[u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &[u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &[u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &[u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &[u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &[u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &[u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &[u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &[u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &[u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &[u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &[u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &[u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &[u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &[u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &[u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &[u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &[u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &[u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &[u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &[u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &[u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &[u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &[u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &[u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &[u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &[u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &[u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &[u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &[u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &[u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_STDC_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __GCC_ASM_FLAG_OUTPUTS__: u32 = 1;
pub const __code_model_small__: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __SEG_GS: u32 = 1;
pub const __SEG_FS: u32 = 1;
pub const __k8: u32 = 1;
pub const __k8__: u32 = 1;
pub const __tune_k8__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const unix: u32 = 1;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const linux: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201710;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NULL: u32 = 0;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const KBD_DATA_REG: u32 = 96;
pub const KBD_ACK_REG: u32 = 97;
pub const KBD_CMD_REG: u32 = 100;
pub const KBD_STATUS_REG: u32 = 100;
pub const KEY_SPECIAL_FLAG: u32 = 256;
pub const KEY_KEYPAD_FLAG: u32 = 512;
pub const KEY_SHIFT_FLAG: u32 = 4096;
pub const KEY_ALT_FLAG: u32 = 8192;
pub const KEY_CTRL_FLAG: u32 = 16384;
pub const KEY_CAPS_FLAG: u32 = 32768;
pub const ASCII_ESC: u32 = 27;
pub const ASCII_BS: u32 = 8;
pub const KEYPAD_START: u32 = 128;
pub type __u_char = core::ffi::c_uchar;
pub type __u_short = core::ffi::c_ushort;
pub type __u_int = core::ffi::c_uint;
pub type __u_long = core::ffi::c_ulong;
pub type __int8_t = core::ffi::c_schar;
pub type __uint8_t = core::ffi::c_uchar;
pub type __int16_t = core::ffi::c_short;
pub type __uint16_t = core::ffi::c_ushort;
pub type __int32_t = core::ffi::c_int;
pub type __uint32_t = core::ffi::c_uint;
pub type __int64_t = core::ffi::c_long;
pub type __uint64_t = core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = core::ffi::c_long;
pub type __u_quad_t = core::ffi::c_ulong;
pub type __intmax_t = core::ffi::c_long;
pub type __uintmax_t = core::ffi::c_ulong;
pub type __dev_t = core::ffi::c_ulong;
pub type __uid_t = core::ffi::c_uint;
pub type __gid_t = core::ffi::c_uint;
pub type __ino_t = core::ffi::c_ulong;
pub type __ino64_t = core::ffi::c_ulong;
pub type __mode_t = core::ffi::c_uint;
pub type __nlink_t = core::ffi::c_ulong;
pub type __off_t = core::ffi::c_long;
pub type __off64_t = core::ffi::c_long;
pub type __pid_t = core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = core::ffi::c_long;
pub type __rlim_t = core::ffi::c_ulong;
pub type __rlim64_t = core::ffi::c_ulong;
pub type __id_t = core::ffi::c_uint;
pub type __time_t = core::ffi::c_long;
pub type __useconds_t = core::ffi::c_uint;
pub type __suseconds_t = core::ffi::c_long;
pub type __daddr_t = core::ffi::c_int;
pub type __key_t = core::ffi::c_int;
pub type __clockid_t = core::ffi::c_int;
pub type __timer_t = *mut core::ffi::c_void;
pub type __blksize_t = core::ffi::c_long;
pub type __blkcnt_t = core::ffi::c_long;
pub type __blkcnt64_t = core::ffi::c_long;
pub type __fsblkcnt_t = core::ffi::c_ulong;
pub type __fsblkcnt64_t = core::ffi::c_ulong;
pub type __fsfilcnt_t = core::ffi::c_ulong;
pub type __fsfilcnt64_t = core::ffi::c_ulong;
pub type __fsword_t = core::ffi::c_long;
pub type __ssize_t = core::ffi::c_long;
pub type __syscall_slong_t = core::ffi::c_long;
pub type __syscall_ulong_t = core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut core::ffi::c_char;
pub type __intptr_t = core::ffi::c_long;
pub type __socklen_t = core::ffi::c_uint;
pub type __sig_atomic_t = core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = core::ffi::c_schar;
pub type int_fast16_t = core::ffi::c_long;
pub type int_fast32_t = core::ffi::c_long;
pub type int_fast64_t = core::ffi::c_long;
pub type uint_fast8_t = core::ffi::c_uchar;
pub type uint_fast16_t = core::ffi::c_ulong;
pub type uint_fast32_t = core::ffi::c_ulong;
pub type uint_fast64_t = core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type schar_t = core::ffi::c_schar;
pub type uchar_t = core::ffi::c_uchar;
pub type sshort_t = core::ffi::c_short;
pub type ushort_t = core::ffi::c_ushort;
pub type sint_t = core::ffi::c_int;
pub type uint_t = core::ffi::c_uint;
pub type sllong_t = core::ffi::c_longlong;
pub type ullong_t = core::ffi::c_ulonglong;
pub type slong_t = core::ffi::c_long;
pub type ulong_t = core::ffi::c_ulong;
pub type size_t = core::ffi::c_ulong;
pub type ssize_t = core::ffi::c_long;
pub type off_t = core::ffi::c_ulong;
pub type sint64_t = core::ffi::c_long;
pub type sint32_t = core::ffi::c_int;
pub type sint16_t = core::ffi::c_short;
pub type sint8_t = core::ffi::c_char;
pub type addr_t = ulong_t;
pub type bool_t = uchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct naut_info {
    _unused: [u8; 0],
}
pub type nk_keycode_t = u16;
pub type nk_scancode_t = u16;
extern "C" {
    pub fn kbd_translate(arg1: nk_scancode_t) -> nk_keycode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nk_mouse_event {
    pub left: u8,
    pub middle: u8,
    pub right: u8,
    pub res: u8,
    pub dx: sint32_t,
    pub dy: sint32_t,
}
#[test]
fn bindgen_test_layout_nk_mouse_event() {
    assert_eq!(
        ::core::mem::size_of::<nk_mouse_event>(),
        12usize,
        concat!("Size of: ", stringify!(nk_mouse_event))
    );
    assert_eq!(
        ::core::mem::align_of::<nk_mouse_event>(),
        4usize,
        concat!("Alignment of ", stringify!(nk_mouse_event))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_mouse_event>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_mouse_event),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_mouse_event>())).middle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_mouse_event),
            "::",
            stringify!(middle)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_mouse_event>())).right as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_mouse_event),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_mouse_event>())).res as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_mouse_event),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_mouse_event>())).dx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_mouse_event),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_mouse_event>())).dy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_mouse_event),
            "::",
            stringify!(dy)
        )
    );
}
pub type nk_mouse_event_t = nk_mouse_event;
extern "C" {
    pub fn ps2_init(naut: *mut naut_info) -> core::ffi::c_int;
}
extern "C" {
    pub fn ps2_reset() -> core::ffi::c_int;
}
extern "C" {
    pub fn ps2_kbd_reset() -> core::ffi::c_int;
}
extern "C" {
    pub fn ps2_mouse_reset() -> core::ffi::c_int;
}
extern "C" {
    pub fn ps2_deinit() -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nk_thread {
    _unused: [u8; 0],
}
pub const nk_vc_type_RAW: nk_vc_type = 0;
pub const nk_vc_type_COOKED: nk_vc_type = 1;
pub const nk_vc_type_RAW_NOQUEUE: nk_vc_type = 2;
pub type nk_vc_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nk_virtual_console {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nk_vc_ops {
    pub raw_noqueue: ::core::option::Option<
        unsafe extern "C" fn(arg1: nk_scancode_t, priv_: *mut core::ffi::c_void),
    >,
}
#[test]
fn bindgen_test_layout_nk_vc_ops() {
    assert_eq!(
        ::core::mem::size_of::<nk_vc_ops>(),
        8usize,
        concat!("Size of: ", stringify!(nk_vc_ops))
    );
    assert_eq!(
        ::core::mem::align_of::<nk_vc_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(nk_vc_ops))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nk_vc_ops>())).raw_noqueue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nk_vc_ops),
            "::",
            stringify!(raw_noqueue)
        )
    );
}
extern "C" {
    pub fn nk_create_vc(
        name: *mut core::ffi::c_char,
        new_vc_type: nk_vc_type,
        attr: u8,
        ops: *mut nk_vc_ops,
        priv_: *mut core::ffi::c_void,
    ) -> *mut nk_virtual_console;
}
extern "C" {
    pub fn nk_destroy_vc(vc: *mut nk_virtual_console) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_bind_vc(thread: *mut nk_thread, cons: *mut nk_virtual_console) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_release_vc(thread: *mut nk_thread) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_get_cur_vc() -> *mut nk_virtual_console;
}
extern "C" {
    pub fn nk_switch_to_vc(vc: *mut nk_virtual_console) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_switch_to_prev_vc() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_switch_to_next_vc() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_switch_to_vc_list() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_putchar(c: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_print(s: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_puts(s: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_printf(fmt: *mut core::ffi::c_char, ...) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_log(fmt: *mut core::ffi::c_char, ...) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_printf_specific(
        vc: *mut nk_virtual_console,
        fmt: *mut core::ffi::c_char,
        ...
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_setattr(attr: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_setattr_specific(vc: *mut nk_virtual_console, attr: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_clear(attr: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_clear_specific(vc: *mut nk_virtual_console, attr: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_scrollup() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_scrollup_specific(vc: *mut nk_virtual_console) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_setpos(x: u8, y: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_getpos(x: *mut u8, y: *mut u8);
}
extern "C" {
    pub fn nk_vc_setpos_specific(vc: *mut nk_virtual_console, x: u8, y: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_display_char(c: u8, attr: u8, x: u8, y: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_display_str(c: *mut u8, n: u8, attr: u8, x: u8, y: u8) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_display_char_specific(
        vc: *mut nk_virtual_console,
        c: u8,
        attr: u8,
        x: u8,
        y: u8,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_display_str_specific(
        vc: *mut nk_virtual_console,
        c: *mut u8,
        n: u8,
        attr: u8,
        x: u8,
        y: u8,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_enqueue_scancode(
        vc: *mut nk_virtual_console,
        scan: nk_scancode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_enqueue_keycode(
        vc: *mut nk_virtual_console,
        key: nk_keycode_t,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_dequeue_scancode(vc: *mut nk_virtual_console) -> nk_scancode_t;
}
extern "C" {
    pub fn nk_vc_dequeue_keycode(vc: *mut nk_virtual_console) -> nk_keycode_t;
}
extern "C" {
    pub fn nk_vc_get_keycode(wait: core::ffi::c_int) -> nk_keycode_t;
}
extern "C" {
    pub fn nk_vc_get_scancode(wait: core::ffi::c_int) -> nk_scancode_t;
}
extern "C" {
    pub fn nk_vc_getchar_extended(wait: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_getchar() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_gets(
        buf: *mut core::ffi::c_char,
        n: core::ffi::c_int,
        display: core::ffi::c_int,
        notifier: ::core::option::Option<
            unsafe extern "C" fn(
                buf: *mut core::ffi::c_char,
                priv_: *mut core::ffi::c_void,
                o: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
        priv_: *mut core::ffi::c_void,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_handle_keyboard(scan: nk_scancode_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_handle_mouse(mouse: *mut nk_mouse_event_t) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_init() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_is_active() -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_start_chardev_console(chardev: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_stop_chardev_console(chardev: *mut core::ffi::c_char) -> core::ffi::c_int;
}
extern "C" {
    pub fn nk_vc_deinit() -> core::ffi::c_int;
}
